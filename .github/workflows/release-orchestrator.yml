# SPDX-FileCopyrightText: 2024 Digg - Agency for Digital Government
#
# SPDX-License-Identifier: CC0-1.0

# Release Orchestrator
# 
# Purpose: Main orchestrator workflow that coordinates the complete release process for
# production releases. It handles version management, artifact publishing, container 
# building, security attestations, and GitHub release creation in a single workflow.
#
# How it works:
# 1. Validates release prerequisites (version match, credentials, permissions)
# 2. Bumps version and generates changelog using git-cliff
# 3. Publishes artifacts to configured registries (Maven Central, NPM, GitHub Packages)
# 4. Builds and publishes container images with SLSA/SBOM if configured
# 5. Creates GitHub release with changelog, artifacts, and signatures
#
# Security controls:
# - GPG signing of all artifacts (if signatures: true)
# - SLSA provenance attestation for supply chain security
# - SBOM generation in multiple formats (CycloneDX, SPDX)
# - Container vulnerability scanning with Trivy
# - License compliance checking
#
# Required Secrets (depending on configuration):
#   GITHUB_TOKEN: Automatically provided for GitHub operations
#   GPG_SECRET_KEY: For artifact signing (if signatures enabled)
#   GPG_PASSPHRASE: For artifact signing (if signatures enabled)
#   MAVEN_CENTRAL_USERNAME: For Maven Central publishing (maven-lib-mavencentral)
#   MAVEN_CENTRAL_PASSWORD: For Maven Central publishing (maven-lib-mavencentral)
#   NPM_TOKEN: For NPM registry publishing (npm packages)
#
# Required Permissions:
#   contents: write       # Create releases and tags
#   packages: write       # Publish packages and containers
#   id-token: write      # OIDC for attestations
#   attestations: write  # Attach SBOMs
#   security-events: write # Upload scan results
#   actions: read        # Read workflow for SLSA
#
# Composable Components:
#   - artifactPublisher: maven-app-github, maven-lib-mavencentral, npm-app-github
#   - containerBuilder: containerimage-ghcr
#   - changelogCreator: git-cliff
#   - releasePublisher: jreleaser, github-cli
---
name: Release Orchestrator

on:
  workflow_call: # yamllint disable-line rule:truthy
    inputs:
      # Project configuration
      projectType:
        description: "Project type: maven, npm (required for version bump)"
        required: true
        type: string
      
      # Composition inputs - specify which publishers/builders to use
      artifactPublisher:
        description: "Artifact publisher workflow (e.g., maven-app-github, npm-app-github). Leave empty to skip artifact publishing"
        required: false
        type: string
      
      # Artifact configuration (use artifact. prefix)
      artifact.javaversion:
        description: "Java version for Maven projects (default: 21)"
        required: false
        default: "21"
        type: string
      artifact.nodeversion:
        description: "Node version for NPM projects (default: 22)"
        required: false
        default: "22"
        type: string
      artifact.attachpattern:
        description: "Pattern for artifacts to attach to release (default: target/*.jar for Maven)"
        required: false
        default: "target/*.jar"
        type: string
      artifact.npmtag:
        description: "NPM publish tag (default: latest)"
        required: false
        default: "latest"
        type: string
      artifact.settingspath:
        description: "Path to Maven settings.xml (for maven-lib-mavencentral)"
        required: false
        type: string
      artifact.jreleaserenabled:
        description: "Enable JReleaser Maven plugin (for maven-lib-mavencentral)"
        required: false
        default: false
        type: boolean
      containerBuilder:
        description: "Container builder type (e.g., containerimage-ghcr). Leave empty to skip container building"
        required: false
        type: string
      
      # Container configuration (use container. prefix)
      container.registry:
        description: "Container registry (default: ghcr.io)"
        required: false
        default: "ghcr.io"
        type: string
      container.platforms:
        description: "Target platforms (default: linux/amd64,linux/arm64)"
        required: false
        default: "linux/amd64,linux/arm64"
        type: string
      container.enableslsa:
        description: "Enable SLSA provenance (default: true)"
        required: false
        default: true
        type: boolean
      container.containerfile:
        description: "Path to Containerfile (default: Containerfile)"
        required: false
        default: "Containerfile"
        type: string
      container.enablesbom:
        description: "Generate SBOM (default: true)"
        required: false
        default: true
        type: boolean
      container.enablescan:
        description: "Enable vulnerability scanning (default: true)"
        required: false
        default: true
        type: boolean
      releaseType:
        description: "Release type: stable, prerelease (auto-detected from tag if not specified)"
        required: false
        type: string
      branch:
        description: "Branch to work with (default: main)"
        required: false
        default: "main"
        type: string
      
      # Changelog creator configuration
      changelogCreator:
        description: "Changelog creator type (e.g., git-cliff). Leave empty to skip"
        required: false
        default: "git-cliff"
        type: string
      changelog.config:
        description: "Changelog configuration file (default: uses generate-changelog default)"
        required: false
        default: ""
        type: string
      changelog.skipversionbump:
        description: "Skip version bump (default: false)"
        required: false
        default: false
        type: boolean

      

      
      # Release publisher configuration  
      releasePublisher:
        description: "Release publisher type (jreleaser or github-cli). Leave empty to skip GitHub release"
        required: false
        type: string
      release.config:
        description: "Release configuration file (for JReleaser, default: jreleaser.yml)"
        required: false
        default: "jreleaser.yml"
        type: string
      release.generatesbom:
        description: "Generate SBOM for release (default: true)"
        required: false
        default: true
        type: boolean
      release.attachartifacts:
        description: "Glob patterns for artifacts to attach to GitHub release (comma/newline separated)"
        required: false
        default: ""
        type: string
      release.signartifacts:
        description: "GPG sign release artifacts (default: true)"
        required: false
        default: true
        type: boolean
      release.checkauthorization:
        description: "Check if user is authorized for non-SNAPSHOT releases (default: false, true for maven-lib-mavencentral)"
        required: false
        default: false
        type: boolean
      release.draft:
        description: "Create as draft release (default: false)"
        required: false
        default: false
        type: boolean
      
      # Advanced configuration
      workingDirectory:
        description: "Working directory for operations"
        required: false
        default: "."
        type: string
      
      file_pattern:
        description: "Files to commit in version bump (auto-detected based on projectType if not specified: Maven='CHANGELOG.md pom.xml', NPM='CHANGELOG.md package.json package-lock.json', Gradle='CHANGELOG.md build.gradle settings.gradle')"
        required: false
        type: string
        default: ""

concurrency:
  group: release-${{ github.repository }}-${{ github.ref }}
  cancel-in-progress: false  # Queue releases, don't cancel partial releases

permissions:
  contents: read  # Best Security practice. Jobs only get read as base, and then permissions are added as needed

jobs:
  # Step 0a: Setup defaults based on project type
  setup-defaults:
    name: Setup Defaults
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      file_pattern: ${{ steps.set-defaults.outputs.file_pattern }}
    steps:
      - name: Set project type defaults
        id: set-defaults
        run: |
          # Set file_pattern based on project type if not explicitly provided
          if [ -n "${{ inputs.file_pattern }}" ]; then
            # User provided explicit value, use it
            echo "file_pattern=${{ inputs.file_pattern }}" >> $GITHUB_OUTPUT
          else
            # Auto-detect based on project type
            case "${{ inputs.projectType }}" in
              npm)
                echo "file_pattern=CHANGELOG.md package.json package-lock.json" >> $GITHUB_OUTPUT
                ;;
              maven)
                echo "file_pattern=CHANGELOG.md pom.xml" >> $GITHUB_OUTPUT
                ;;
              gradle)
                echo "file_pattern=CHANGELOG.md build.gradle settings.gradle" >> $GITHUB_OUTPUT
                ;;
              python)
                echo "file_pattern=CHANGELOG.md pyproject.toml" >> $GITHUB_OUTPUT
                ;;
              *)
                # Fallback for unknown project types
                echo "file_pattern=CHANGELOG.md" >> $GITHUB_OUTPUT
                ;;
            esac
          fi
          
          echo "::notice::Using file_pattern: $(cat $GITHUB_OUTPUT | grep file_pattern | cut -d= -f2-)"

  # Step 0b: Validate configuration
  validate-config:
    name: Validate Configuration
    runs-on: ubuntu-latest
    needs: [setup-defaults]
    permissions:
      contents: read
    steps:
      - name: Validate workflow inputs
        run: |
          EXIT_CODE=0
          
          echo "## Configuration Validation" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check 1: NPM projects should have package.json in file_pattern
          if [ "${{ inputs.projectType }}" = "npm" ]; then
            FILE_PATTERN="${{ needs.setup-defaults.outputs.file_pattern }}"
            if [[ ! "$FILE_PATTERN" =~ "package.json" ]]; then
              echo "::error::NPM projects must include package.json in file_pattern"
              echo "::error::Recommended: file_pattern: 'CHANGELOG.md package.json package-lock.json'"
              echo "::notice::Current value: '$FILE_PATTERN'"
              echo "❌ NPM file_pattern validation failed" >> $GITHUB_STEP_SUMMARY
              EXIT_CODE=1
            else
              echo "✅ NPM file_pattern includes package.json" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          # Check 2: Container builder without artifact publisher (warning only)
          if [ -n "${{ inputs.containerBuilder }}" ] && [ -z "${{ inputs.artifactPublisher }}" ]; then
            echo "::warning::Building container without publishing artifacts first"
            echo "::notice::Container builds typically need artifacts from Maven/NPM build step"
            echo "::notice::Consider adding artifactPublisher: maven-app-github or npm-app-github"
            echo "⚠️ Building container without artifact publisher" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Check 3: Maven Central publishing best practices
          if [ "${{ inputs.artifactPublisher }}" = "maven-lib-mavencentral" ]; then
            ISSUES=0
            if [ "${{ inputs['artifact.jreleaserenabled'] }}" != "true" ]; then
              echo "::warning::Maven Central publishing typically requires JReleaser"
              echo "::notice::Set artifact.jreleaserenabled: true"
              ISSUES=1
            fi
            if [ -z "${{ inputs['artifact.settingspath'] }}" ]; then
              echo "::warning::Maven Central publishing typically needs custom settings.xml"
              echo "::notice::Set artifact.settingspath: '.mvn/settings.xml'"
              ISSUES=1
            fi
            if [ $ISSUES -eq 1 ]; then
              echo "⚠️ Maven Central configuration may be incomplete" >> $GITHUB_STEP_SUMMARY
            else
              echo "✅ Maven Central configuration looks good" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          # Check 4: Conflicting configurations
          if [ "${{ inputs.artifactPublisher }}" = "maven-lib-mavencentral" ] && [ -n "${{ inputs.containerBuilder }}" ]; then
            echo "::warning::Maven libraries typically don't need container images"
            echo "::notice::Libraries are consumed as dependencies, not run as containers"
            echo "⚠️ Unusual: Library with container builder" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ $EXIT_CODE -eq 0 ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "✅ **All validations passed**" >> $GITHUB_STEP_SUMMARY
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "❌ **Configuration validation failed**" >> $GITHUB_STEP_SUMMARY
          fi
          
          exit $EXIT_CODE

  # Step 0c: Validate Prerequisites
  validate-prerequisites:
    name: Validate Prerequisites
    needs: [setup-defaults, validate-config]
    secrets: inherit
    uses: ./.github/workflows/release-prerequisites.yml
    with:
      projectType: ${{ inputs.projectType }}
      useJReleaser: ${{ inputs.releasePublisher == 'jreleaser' }}
      artifactPublisher: ${{ inputs.artifactPublisher }}
      containerRegistry: ${{ inputs['container.registry'] }}
      signArtifacts: ${{ inputs['release.signartifacts'] }}
      checkAuthorization: ${{ inputs.artifactPublisher == 'maven-lib-mavencentral' || inputs['release.checkauthorization'] }}
      branch: ${{ inputs.branch }}
      workflowsRef: feat/ci-refactor

  # Step 1: Version Bump
  version-and-changelog:
    needs: [setup-defaults, validate-prerequisites]
    name: Version Bump
    if: ${{ !inputs['changelog.skipversionbump'] && inputs.changelogCreator == 'git-cliff' }}
    permissions:
      contents: write
      packages: read
    secrets: inherit
    uses: ./.github/workflows/version-bump.yml
    with:
      branch: ${{ inputs.branch }}
      projectType: ${{ inputs.projectType }}
      file_pattern: ${{ needs.setup-defaults.outputs.file_pattern }}
      javaVersion: ${{ inputs['artifact.javaversion'] }}
      nodeVersion: ${{ inputs['artifact.nodeversion'] }}
      workingDirectory: ${{ inputs.workingDirectory }}

  # Step 2a: Publish Maven Application
  publish-maven-app:
    name: Publish Maven Application
    needs: [version-and-changelog]
    if: ${{ !failure() && !cancelled() && inputs.artifactPublisher == 'maven-app-github' }}
    permissions:
      contents: write
      packages: write
      id-token: write
    secrets: inherit
    uses: ./.github/workflows/publish-maven-app-github.yml
    with:
      javaVersion: ${{ inputs['artifact.javaversion'] }}
      workingDirectory: ${{ inputs.workingDirectory }}
      branch: ${{ inputs.branch }}
      attachPattern: ${{ inputs['artifact.attachpattern'] }}

  # Step 2c: Publish Maven Library to Maven Central
  publish-maven-lib:
    name: Publish Maven Library
    needs: [version-and-changelog]
    if: ${{ !failure() && !cancelled() && inputs.artifactPublisher == 'maven-lib-mavencentral' }}
    permissions:
      contents: write
      packages: write
      id-token: write
    secrets: inherit
    uses: ./.github/workflows/publish-maven-lib-central.yml
    with:
      javaVersion: ${{ inputs['artifact.javaversion'] }}
      workingDirectory: ${{ inputs.workingDirectory }}
      branch: ${{ inputs.branch }}
      settingsPath: ${{ inputs['artifact.settingspath'] }}
      jreleaserEnabled: ${{ inputs['artifact.jreleaserenabled'] }}
      changelogConfig: ${{ inputs['changelog.config'] }}

  # Step 2b: Publish NPM Application
  publish-npm-app:
    name: Publish NPM Application
    needs: [version-and-changelog]
    if: ${{ !failure() && !cancelled() && inputs.artifactPublisher == 'npm-app-github' }}
    permissions:
      contents: write
      packages: write
      id-token: write
    secrets: inherit
    uses: ./.github/workflows/publish-npm-app-github.yml
    with:
      nodeVersion: ${{ inputs['artifact.nodeversion'] }}
      workingDirectory: ${{ inputs.workingDirectory }}
      branch: ${{ inputs.branch }}
      npmTag: ${{ inputs['artifact.npmtag'] }}

  # Step 3: Build and Publish Container
  publish-container:
    name: Publish Container
    needs: [publish-maven-app, publish-npm-app]
    if: ${{ !failure() && !cancelled() && inputs.containerBuilder == 'containerimage-ghcr' }}
    permissions:
      contents: read
      packages: write
      id-token: write
      security-events: write
      actions: read
      attestations: write
    secrets: inherit
    uses: ./.github/workflows/build-container-ghcr.yml
    with:
      containerfile: ${{ inputs['container.containerfile'] }}
      context: ${{ inputs.workingDirectory }}
      branch: ${{ inputs.branch }}
      platforms: ${{ inputs['container.platforms'] }}
      enableSLSA: ${{ inputs['container.enableslsa'] }}
      enableSBOM: ${{ inputs['container.enablesbom'] }}
      enableScan: ${{ inputs['container.enablescan'] }}
      registry: ${{ inputs['container.registry'] }}
      projectType: ${{ inputs.projectType }}
      pushImage: true

  # Step 4: Create GitHub Release  
  create-release:
    name: Create GitHub Release
    needs: [publish-maven-app, publish-npm-app, publish-maven-lib, publish-container]
    # Run even if previous jobs were skipped but at least one succeeded
    if: ${{ !failure() && !cancelled() && (inputs.releasePublisher == 'jreleaser' || inputs.releasePublisher == 'github-cli') }}
    permissions:
      contents: write
      packages: read
      id-token: write
    secrets: inherit
    uses: ./.github/workflows/release-github.yml
    with:
      releaseName: "${{ github.ref_name }}"
      checkoutRef: ${{ inputs.branch }}
      attachArtifacts: ${{ inputs['release.attachartifacts'] }}
      generateSBOM: ${{ inputs['release.generatesbom'] }}
      signArtifacts: ${{ inputs['release.signartifacts'] }}
      draft: ${{ inputs['release.draft'] }}
      useJReleaser: ${{ inputs.releasePublisher == 'jreleaser' }}
      jreleaserConfig: ${{ inputs['release.config'] }}
      projectType: ${{ inputs.projectType }}
      changelogConfig: ${{ inputs['changelog.config'] }}
      makeLatest: ${{ (inputs.releaseType == 'stable' || (!inputs.releaseType && !contains(github.ref_name, '-'))) && 'true' || 'false' }}

  # Final summary
  release-summary:
    name: Release Summary
    needs: [validate-prerequisites, version-and-changelog, publish-maven-app, publish-npm-app, publish-maven-lib, publish-container, create-release]
    if: always()
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
    steps:
      - name: Generate Release Summary
        run: |
          cat >> $GITHUB_STEP_SUMMARY << 'EOF'
          # Release Summary
          
          ## Release Overview
          | Property | Value |
          |----------|-------|
          | **Version** | `${{ github.ref_name }}` |
          | **Type** | ${{ inputs.releaseType == 'stable' && 'Stable' || contains(github.ref_name, '-alpha') && 'Alpha' || contains(github.ref_name, '-beta') && 'Beta' || contains(github.ref_name, '-rc') && 'Release Candidate' || contains(github.ref_name, '-snapshot') && 'Snapshot' || contains(github.ref_name, '-SNAPSHOT') && 'Snapshot' || 'Stable' }} |
          | **Source Branch** | `${{ inputs.branch }}` |
          | **Commit** | `${{ github.sha }}` |
          | **Released By** | @${{ github.actor }} |
          EOF
          
          # Add current timestamp
          echo "| **Released At** | $(date -u '+%Y-%m-%d %H:%M:%S UTC') |" >> $GITHUB_STEP_SUMMARY
          
          cat >> $GITHUB_STEP_SUMMARY << 'EOF'
          
          ## What Was Published
          | Component | Status | Details |
          |-----------|--------|---------|
          EOF
          
          # Maven Application
          if [ "${{ inputs.artifactPublisher }}" = "maven-app-github" ]; then
            if [ "${{ needs.publish-maven-app.result }}" = "success" ]; then
              echo "| **Maven Package** | ✅ Published | [View in GitHub Packages](https://github.com/${{ github.repository }}/packages) |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| **Maven Package** | ❌ Failed | Check workflow logs |" >> $GITHUB_STEP_SUMMARY
            fi
          elif [ "${{ inputs.artifactPublisher }}" = "maven-lib-mavencentral" ]; then
            if [ "${{ needs.publish-maven-lib.result }}" = "success" ]; then
              echo "| **Maven Library** | ✅ Published | Maven Central |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| **Maven Library** | ❌ Failed | Check workflow logs |" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          # NPM Package
          if [ "${{ inputs.artifactPublisher }}" = "npm-app-github" ]; then
            if [ "${{ needs.publish-npm-app.result }}" = "success" ]; then
              echo "| **NPM Package** | ✅ Published | [View in npm Registry](https://github.com/${{ github.repository }}/packages) |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| **NPM Package** | ❌ Failed | Check workflow logs |" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          # Container
          if [ "${{ inputs.containerBuilder }}" = "containerimage-ghcr" ]; then
            if [ "${{ needs.publish-container.result }}" = "success" ]; then
              CONTAINER_NAME=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
              echo "| **Container Image** | ✅ Published | [ghcr.io/${CONTAINER_NAME}:${{ github.ref_name }}](https://github.com/${{ github.repository }}/pkgs/container/$(basename ${{ github.repository }})) |" >> $GITHUB_STEP_SUMMARY
            elif [ "${{ needs.publish-container.result }}" = "skipped" ]; then
              echo "| **Container Image** | ⏭️ Skipped | Not configured |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| **Container Image** | ❌ Failed | Check workflow logs |" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "| **Container Image** | ⏭️ Skipped | Not configured |" >> $GITHUB_STEP_SUMMARY
          fi
          
          # GitHub Release
          if [ "${{ needs.create-release.result }}" = "success" ]; then
            echo "| **GitHub Release** | ✅ Created | [View Release](https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }}) |" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.create-release.result }}" = "skipped" ]; then
            echo "| **GitHub Release** | ⏭️ Skipped | Not configured |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| **GitHub Release** | ❌ Failed | Check workflow logs |" >> $GITHUB_STEP_SUMMARY
          fi
          
          cat >> $GITHUB_STEP_SUMMARY << 'EOF'
          
          ## 🔒 Security & Compliance
          | Check | Status | Details |
          |-------|--------|---------|
          | **Tag Validation** | ✅ Passed | Annotated & Signed |
          | **GPG Signature** | ${{ inputs['release.signartifacts'] && '✅ Signed' || '⏭️ Not configured' }} | OSPO_BOT |
          EOF
          
          # Add SLSA info if container was built
          if [ "${{ inputs.containerBuilder }}" = "containerimage-ghcr" ] && [ "${{ needs.publish-container.result }}" = "success" ]; then
            CONTAINER_NAME=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
            if [ "${{ inputs['container.enableslsa'] }}" = "true" ]; then
              echo "| **SLSA Provenance** | ✅ Level 3 | [View Attestation](https://github.com/${{ github.repository }}/attestations) |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| **SLSA Provenance** | ⏭️ Disabled | Not configured |" >> $GITHUB_STEP_SUMMARY
            fi
            
            if [ "${{ inputs['container.enablesbom'] }}" = "true" ]; then
              echo "| **SBOM** | ✅ Generated | Available in container registry |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| **SBOM** | ⏭️ Disabled | Not configured |" >> $GITHUB_STEP_SUMMARY
            fi
            
            if [ "${{ inputs['container.enablescan'] }}" = "true" ]; then
              echo "| **Vulnerability Scan** | ✅ Completed | [Security tab](https://github.com/${{ github.repository }}/security/code-scanning) |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| **Vulnerability Scan** | ⏭️ Disabled | Not configured |" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          # Quick start section
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "          ## Quick Start" >> $GITHUB_STEP_SUMMARY
          
          # Container pull command
          if [ "${{ inputs.containerBuilder }}" = "containerimage-ghcr" ] && [ "${{ needs.publish-container.result }}" = "success" ]; then
            CONTAINER_NAME=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
            echo '```bash' >> $GITHUB_STEP_SUMMARY
            echo "# Pull with Podman" >> $GITHUB_STEP_SUMMARY
            echo "podman pull ghcr.io/${CONTAINER_NAME}:${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi
          
          # Maven dependency
          if [ "${{ inputs.projectType }}" = "maven" ] && [ "${{ inputs.artifactPublisher }}" = "maven-app-github" ]; then
            echo '```xml' >> $GITHUB_STEP_SUMMARY
            echo "<!-- Add to pom.xml -->" >> $GITHUB_STEP_SUMMARY
            echo "<dependency>" >> $GITHUB_STEP_SUMMARY
            echo "  <groupId>GROUP_ID</groupId>" >> $GITHUB_STEP_SUMMARY
            echo "  <artifactId>ARTIFACT_ID</artifactId>" >> $GITHUB_STEP_SUMMARY
            echo "  <version>${{ github.ref_name }}</version>" >> $GITHUB_STEP_SUMMARY
            echo "</dependency>" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi
          
          # NPM install
          if [ "${{ inputs.projectType }}" = "npm" ] && [ "${{ inputs.artifactPublisher }}" = "npm-app-github" ]; then
            echo '```bash' >> $GITHUB_STEP_SUMMARY
            echo "# Install with npm" >> $GITHUB_STEP_SUMMARY
            echo "npm install @${{ github.repository }}@${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi
          
          cat >> $GITHUB_STEP_SUMMARY << 'EOF'
          
          ## Release Resources
          - **[GitHub Release](https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }})** - Release notes and assets
          - **[Changelog](https://github.com/${{ github.repository }}/blob/${{ inputs.branch }}/CHANGELOG.md)** - Version history
          - **[Workflow Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})** - Build details
          - **[All Packages](https://github.com/${{ github.repository }}/packages)** - Package registry
          - **[All Releases](https://github.com/${{ github.repository }}/releases)** - Release history
          
          EOF
          
          # Add footer with actual timestamp
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "*Release workflow completed at $(date -u '+%Y-%m-%d %H:%M:%S UTC')* • [View all workflows](https://github.com/${{ github.repository }}/actions)" >> $GITHUB_STEP_SUMMARY

