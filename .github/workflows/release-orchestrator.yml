# SPDX-FileCopyrightText: 2024 Digg - Agency for Digital Government
#
# SPDX-License-Identifier: CC0-1.0

# Description:
# This is the main orchestrator workflow for releases. It coordinates version bumping,
# artifact publishing, container image building, and GitHub release creation.
# It provides a single entry point for all release activities.
#
# Usage:
# 1. Add the following to your workflow file:
#    jobs:
#      release:
#        uses: diggsweden/.github/.github/workflows/release-orchestrator.yml@main
#        secrets: inherit
#        with:
#          projectType: "npm"  # or "maven"
#          releaseType: "stable"
#
# 2. Ensure your repository has all required secrets for GPG signing and publishing
#
# 3. The workflow will orchestrate the complete release process
---
name: Release Orchestrator

on:
  workflow_call: # yamllint disable-line rule:truthy
    inputs:
      # Project configuration
      projectType:
        description: "Project type: maven, npm"
        required: true
        type: string
      releaseType:
        description: "Release type: stable, prerelease, snapshot"
        required: false
        default: "stable"
        type: string
      
      # Version and changelog configuration
      skipVersionBump:
        description: "Skip version bump and changelog generation"
        required: false
        default: false
        type: boolean

      changelogConfig:
        description: "Changelog configuration file"
        required: false
        default: ".github-templates/gitcliff-templates/keepachangelog.toml"
        type: string
      
      # Artifact publishing configuration
      skipArtifactPublish:
        description: "Skip artifact publishing"
        required: false
        default: false
        type: boolean
      artifactRegistry:
        description: "Artifact registry: github, npmjs, maven-central"
        required: false
        default: "github"
        type: string
      npmTag:
        description: "NPM publish tag for pre-releases"
        required: false
        default: "latest"
        type: string
      
      # Container configuration
      skipContainerPublish:
        description: "Skip container image publishing"
        required: false
        default: false
        type: boolean
      containerRegistry:
        description: "Container registry"
        required: false
        default: "ghcr.io"
        type: string
      containerPlatforms:
        description: "Container target platforms"
        required: false
        default: "linux/amd64"
        type: string
      containerEnableSLSA:
        description: "Enable SLSA provenance for containers"
        required: false
        default: true
        type: boolean
      containerfile:
        description: "Path to Containerfile"
        required: false
        default: "Containerfile"
        type: string
      
      # GitHub Release configuration
      skipGitHubRelease:
        description: "Skip GitHub release creation"
        required: false
        default: false
        type: boolean
      useJReleaser:
        description: "Use JReleaser for GitHub releases"
        required: false
        default: false
        type: boolean
      jreleaserConfig:
        description: "JReleaser configuration file"
        required: false
        default: "jreleaser.yml"
        type: string
      attachArtifacts:
        description: "Artifacts to attach to release"
        required: false
        type: string
      generateSBOM:
        description: "Generate SBOM for release"
        required: false
        default: true
        type: boolean
      signArtifacts:
        description: "GPG sign release artifacts"
        required: false
        default: true
        type: boolean
      
      # Advanced configuration
      branch:
        description: "Branch to release from"
        required: false
        default: "main"
        type: string
      javaVersion:
        description: "Java version for Maven projects"
        required: false
        default: "21"
        type: string
      nodeVersion:
        description: "Node version for NPM projects"
        required: false
        default: "22.x"
        type: string

      workingDirectory:
        description: "Working directory for operations"
        required: false
        default: "."
        type: string

permissions:
  contents: read

jobs:
  # Step 1: Version Bump and Changelog Generation
  version-and-changelog:
    name: Version Bump and Changelog
    if: ${{ !inputs.skipVersionBump }}
    permissions:
      contents: write
      packages: read
    secrets: inherit
    uses: ./.github/workflows/version-bump-changelog.yml
    with:
      branch: ${{ inputs.branch }}
      projectType: ${{ inputs.projectType }}

      changelog-config: ${{ inputs.changelogConfig }}


  # Step 2: Publish Artifacts
  publish-artifacts:
    name: Publish Artifacts
    needs: [version-and-changelog]
    # Run even if version-and-changelog was skipped
    if: ${{ !failure() && !cancelled() && !inputs.skipArtifactPublish }}
    permissions:
      contents: read
      packages: write
      id-token: write
    secrets: inherit
    uses: ./.github/workflows/publish-artifacts.yml
    with:
      projectType: ${{ inputs.projectType }}
      registry: ${{ inputs.artifactRegistry }}

      javaVersion: ${{ inputs.javaVersion }}
      nodeVersion: ${{ inputs.nodeVersion }}
      npmTag: ${{ inputs.releaseType == 'prerelease' && inputs.npmTag || 'latest' }}
      workingDirectory: ${{ inputs.workingDirectory }}

  # Step 3: Build and Publish Container
  publish-container:
    name: Publish Container
    needs: [version-and-changelog]
    # Run even if version-and-changelog was skipped
    if: ${{ !failure() && !cancelled() && !inputs.skipContainerPublish }}
    permissions:
      contents: read
      packages: write
      id-token: write
      security-events: write
      actions: read
    secrets: inherit
    uses: ./.github/workflows/publish-container.yml
    with:
      containerfile: ${{ inputs.containerfile }}
      context: ${{ inputs.workingDirectory }}
      platforms: ${{ inputs.containerPlatforms }}
      enableSLSA: ${{ inputs.containerEnableSLSA }}
      enableSBOM: true
      enableScan: true
      registry: ${{ inputs.containerRegistry }}
      imageTagStrategy: ${{ inputs.releaseType == 'stable' && 'semver' || 'branch' }}
      pushImage: true

  # Step 4: Create GitHub Release
  create-release:
    name: Create GitHub Release
    needs: [publish-artifacts, publish-container]
    # Run even if previous jobs were skipped but at least one succeeded
    if: ${{ !failure() && !cancelled() && !inputs.skipGitHubRelease }}
    permissions:
      contents: write
      packages: read
      id-token: write
    secrets: inherit
    uses: ./.github/workflows/github-release.yml
    with:
      releaseName: "Release ${{ github.ref_name }}"
      attachArtifacts: ${{ inputs.attachArtifacts }}
      generateSBOM: ${{ inputs.generateSBOM }}
      signArtifacts: ${{ inputs.signArtifacts }}
      draft: false
      useJReleaser: ${{ inputs.useJReleaser }}
      jreleaserConfig: ${{ inputs.jreleaserConfig }}
      makeLatest: ${{ inputs.releaseType == 'stable' && 'true' || 'false' }}

  # Step 5: Post-release validation
  post-release-validation:
    name: Validate Release
    needs: [create-release]
    if: ${{ !failure() && !cancelled() }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Validate release artifacts
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Validating release ${{ github.ref_name }}..."
          
          # Check if release exists
          if gh release view "${{ github.ref_name }}"; then
            echo "✅ Release found"
            
            # List release assets
            echo "Release assets:"
            gh release view "${{ github.ref_name }}" --json assets -q '.assets[].name'
          else
            echo "❌ Release not found"
            exit 1
          fi
          
      - name: Validate container image
        if: ${{ !inputs.skipContainerPublish }}
        run: |
          IMAGE="${{ inputs.containerRegistry }}/${{ github.repository }}"
          TAG="${{ github.ref_name }}"
          
          echo "Checking container image: $IMAGE:$TAG"
          
          # Check if we can pull the manifest (without actually downloading the image)
          if docker manifest inspect "$IMAGE:$TAG" > /dev/null 2>&1; then
            echo "✅ Container image found"
          else
            echo "⚠️ Container image not immediately available (may still be processing)"
          fi
      
      - name: Validate NPM package
        if: ${{ inputs.projectType == 'npm' && !inputs.skipArtifactPublish }}
        run: |
          PACKAGE_NAME=$(node -p "require('./package.json').name" 2>/dev/null || echo "${{ github.repository }}")
          VERSION="${{ github.ref_name }}"
          VERSION="${VERSION#v}"  # Remove 'v' prefix if present
          
          echo "Checking NPM package: $PACKAGE_NAME@$VERSION"
          
          # Check package availability (may take time to appear in registry)
          if [ "${{ inputs.artifactRegistry }}" = "npmjs" ]; then
            if npm view "$PACKAGE_NAME@$VERSION" > /dev/null 2>&1; then
              echo "✅ NPM package found in registry"
            else
              echo "⚠️ NPM package not immediately available (may still be processing)"
            fi
          else
            echo "✓ Package published to GitHub Packages (private registry)"
          fi
      
      - name: Validate Maven package
        if: ${{ inputs.projectType == 'maven' && !inputs.skipArtifactPublish }}
        run: |
          echo "✓ Maven package published to ${{ inputs.artifactRegistry }}"
          # Maven Central validation would require additional API calls
          
      - name: Summary
        run: |
          echo "## Release Summary 📦" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Version:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Type:** ${{ inputs.releaseType }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Project Type:** ${{ inputs.projectType }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Completed Steps ✅" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ inputs.skipVersionBump }}" != "true" ]; then
            echo "- Version bump and changelog" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ inputs.skipArtifactPublish }}" != "true" ]; then
            echo "- Artifact publishing to ${{ inputs.artifactRegistry }}" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ inputs.skipContainerPublish }}" != "true" ]; then
            echo "- Container image to ${{ inputs.containerRegistry }}" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ inputs.skipGitHubRelease }}" != "true" ]; then
            echo "- GitHub release creation" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Release URL" >> $GITHUB_STEP_SUMMARY
          echo "https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY