# SPDX-FileCopyrightText: 2024 Digg - Agency for Digital Government
#
# SPDX-License-Identifier: CC0-1.0

# Release Orchestrator
# 
# Purpose: Main orchestrator workflow that coordinates the complete release process for
# production releases. It handles version management, artifact publishing, container 
# building, security attestations, and GitHub release creation in a single workflow.
#
# How it works:
# 1. Validates release prerequisites (version match, credentials, permissions)
# 2. Bumps version and generates changelog using git-cliff
# 3. Publishes artifacts to configured registries (Maven Central, NPM, GitHub Packages)
# 4. Builds and publishes container images with SLSA/SBOM if configured
# 5. Creates GitHub release with changelog, artifacts, and signatures
#
# Security controls:
# - GPG signing of all artifacts (if signatures: true)
# - SLSA provenance attestation for supply chain security
# - SBOM generation in multiple formats (CycloneDX, SPDX)
# - Container vulnerability scanning with Trivy
# - License compliance checking
#
# Required Secrets (depending on configuration):
#   GITHUB_TOKEN: Automatically provided for GitHub operations
#   GPG_SECRET_KEY: For artifact signing (if signatures enabled)
#   GPG_PASSPHRASE: For artifact signing (if signatures enabled)
#   MAVEN_CENTRAL_USERNAME: For Maven Central publishing (maven-lib-mavencentral)
#   MAVEN_CENTRAL_PASSWORD: For Maven Central publishing (maven-lib-mavencentral)
#   NPM_TOKEN: For NPM registry publishing (npm packages)
#
# Required Permissions:
#   contents: write       # Create releases and tags
#   packages: write       # Publish packages and containers
#   id-token: write      # OIDC for attestations
#   attestations: write  # Attach SBOMs
#   security-events: write # Upload scan results
#   actions: read        # Read workflow for SLSA
#
# Composable Components:
#   - artifactPublisher: maven-app-github, maven-lib-mavencentral, npm-app-github
#   - containerBuilder: containerimage-ghcr
#   - changelogCreator: git-cliff
#   - releasePublisher: jreleaser, github-cli
---
name: Release Orchestrator

on:
  workflow_call: # yamllint disable-line rule:truthy
    inputs:
      # Project configuration
      projectType:
        description: "Project type: maven, npm (required for version bump)"
        required: true
        type: string
      
      # Composition inputs - specify which publishers/builders to use
      artifactPublisher:
        description: "Artifact publisher workflow (e.g., maven-app-github, npm-app-github). Leave empty to skip artifact publishing"
        required: false
        type: string
      
      # Artifact configuration (use artifact. prefix)
      artifact.javaversion:
        description: "Java version for Maven projects (default: 21)"
        required: false
        default: "21"
        type: string
      artifact.nodeversion:
        description: "Node version for NPM projects (default: 22)"
        required: false
        default: "22"
        type: string
      artifact.attachpattern:
        description: "Pattern for artifacts to attach to release (default: target/*.jar for Maven)"
        required: false
        default: "target/*.jar"
        type: string
      artifact.npmtag:
        description: "NPM publish tag (default: latest)"
        required: false
        default: "latest"
        type: string
      artifact.settingspath:
        description: "Path to Maven settings.xml (for maven-lib-mavencentral)"
        required: false
        type: string
      artifact.jreleaserenabled:
        description: "Enable JReleaser Maven plugin (for maven-lib-mavencentral)"
        required: false
        default: false
        type: boolean
      containerBuilder:
        description: "Container builder type (e.g., containerimage-ghcr). Leave empty to skip container building"
        required: false
        type: string
      
      # Container configuration (use container. prefix)
      container.registry:
        description: "Container registry (default: ghcr.io)"
        required: false
        default: "ghcr.io"
        type: string
      container.platforms:
        description: "Target platforms (default: linux/amd64)"
        required: false
        default: "linux/amd64"
        type: string
      container.enableslsa:
        description: "Enable SLSA provenance (default: true)"
        required: false
        default: true
        type: boolean
      container.containerfile:
        description: "Path to Containerfile (default: Containerfile)"
        required: false
        default: "Containerfile"
        type: string
      container.enablesbom:
        description: "Generate SBOM (default: true)"
        required: false
        default: true
        type: boolean
      container.enablescan:
        description: "Enable vulnerability scanning (default: true)"
        required: false
        default: true
        type: boolean
      releaseType:
        description: "Release type: stable, prerelease (auto-detected from tag if not specified)"
        required: false
        type: string
      branch:
        description: "Branch to work with (default: main)"
        required: false
        default: "main"
        type: string
      
      # Changelog creator configuration
      changelogCreator:
        description: "Changelog creator type (e.g., git-cliff). Leave empty to skip"
        required: false
        default: "git-cliff"
        type: string
      changelog.config:
        description: "Changelog configuration file (default: keepachangelog template)"
        required: false
        default: ".github-templates/gitcliff-templates/keepachangelog.toml"
        type: string
      changelog.skipversionbump:
        description: "Skip version bump (default: false)"
        required: false
        default: false
        type: boolean

      

      
      # Release publisher configuration  
      releasePublisher:
        description: "Release publisher type (jreleaser or github-cli). Leave empty to skip GitHub release"
        required: false
        type: string
      release.config:
        description: "Release configuration file (for JReleaser, default: jreleaser.yml)"
        required: false
        default: "jreleaser.yml"
        type: string
      release.generatesbom:
        description: "Generate SBOM for release (default: true)"
        required: false
        default: true
        type: boolean
      release.attachartifacts:
        description: "Glob patterns for artifacts to attach to GitHub release (comma/newline separated)"
        required: false
        default: ""
        type: string
      release.signartifacts:
        description: "GPG sign release artifacts (default: true)"
        required: false
        default: true
        type: boolean
      release.checkauthorization:
        description: "Check if user is authorized for non-SNAPSHOT releases (default: false, true for maven-lib-mavencentral)"
        required: false
        default: false
        type: boolean
      release.draft:
        description: "Create as draft release (default: false)"
        required: false
        default: false
        type: boolean
      
      # Advanced configuration
      workingDirectory:
        description: "Working directory for operations"
        required: false
        default: "."
        type: string
      
      file_pattern:
        description: "Files to commit in version bump (default: CHANGELOG.md pom.xml). NPM projects should set to 'CHANGELOG.md package.json package-lock.json'"
        required: false
        type: string
        default: 'CHANGELOG.md pom.xml'

permissions:
  contents: read  # Best Security practice. Jobs only get read as base, and then permissions are added as needed

jobs:
  # Step 0: Validate Prerequisites
  validate-prerequisites:
    name: Validate Prerequisites
    secrets: inherit
    uses: ./.github/workflows/validate-release-prerequisites.yml
    with:
      projectType: ${{ inputs.projectType }}
      useJReleaser: ${{ inputs.releasePublisher == 'jreleaser' }}
      artifactPublisher: ${{ inputs.artifactPublisher }}
      containerRegistry: ${{ inputs['container.registry'] }}
      signArtifacts: ${{ inputs['release.signartifacts'] }}
      checkAuthorization: ${{ inputs.artifactPublisher == 'maven-lib-mavencentral' || inputs['release.checkauthorization'] }}

  # Step 1: Version Bump and Changelog Generation
  version-and-changelog:
    needs: [validate-prerequisites]
    name: Version Bump and Changelog
    if: ${{ !inputs['changelog.skipversionbump'] && inputs.changelogCreator == 'git-cliff' }}
    permissions:
      contents: write
      packages: read
    secrets: inherit
    uses: ./.github/workflows/version-bump-changelog.yml
    with:
      branch: ${{ inputs.branch }}
      projectType: ${{ inputs.projectType }}
      file_pattern: ${{ inputs.file_pattern }}
      changelog-config: ${{ inputs['changelog.config'] }}
      javaVersion: ${{ inputs['artifact.javaversion'] }}
      nodeVersion: ${{ inputs['artifact.nodeversion'] }}


  # Step 2a: Publish Maven Application
  publish-maven-app:
    name: Publish Maven Application
    needs: [validate-prerequisites, version-and-changelog]
    if: ${{ !failure() && !cancelled() && inputs.artifactPublisher == 'maven-app-github' }}
    permissions:
      contents: write
      packages: write
      id-token: write
    secrets: inherit
    uses: ./.github/workflows/publish-maven-app-github.yml
    with:
      javaVersion: ${{ inputs['artifact.javaversion'] }}
      workingDirectory: ${{ inputs.workingDirectory }}
      branch: ${{ inputs.branch }}
      attachPattern: ${{ inputs['artifact.attachpattern'] }}

  # Step 2c: Publish Maven Library to Maven Central
  publish-maven-lib:
    name: Publish Maven Library
    needs: [validate-prerequisites, version-and-changelog]
    if: ${{ !failure() && !cancelled() && inputs.artifactPublisher == 'maven-lib-mavencentral' }}
    permissions:
      contents: write
      packages: write
      id-token: write
    secrets: inherit
    uses: ./.github/workflows/publish-maven-lib-central.yml
    with:
      javaVersion: ${{ inputs['artifact.javaversion'] }}
      workingDirectory: ${{ inputs.workingDirectory }}
      branch: ${{ inputs.branch }}
      settingsPath: ${{ inputs['artifact.settingspath'] }}
      jreleaserEnabled: ${{ inputs['artifact.jreleaserenabled'] }}

  # Step 2b: Publish NPM Application
  publish-npm-app:
    name: Publish NPM Application
    needs: [validate-prerequisites, version-and-changelog]
    if: ${{ !failure() && !cancelled() && inputs.artifactPublisher == 'npm-app-github' }}
    permissions:
      contents: write
      packages: write
      id-token: write
    secrets: inherit
    uses: ./.github/workflows/publish-npm-app-github.yml
    with:
      nodeVersion: ${{ inputs['artifact.nodeversion'] }}
      workingDirectory: ${{ inputs.workingDirectory }}
      branch: ${{ inputs.branch }}
      npmTag: ${{ inputs['artifact.npmtag'] }}

  # Step 3: Build and Publish Container
  publish-container:
    name: Publish Container
    needs: [validate-prerequisites, version-and-changelog, publish-maven-app, publish-npm-app, publish-maven-lib]
    if: ${{ !failure() && !cancelled() && inputs.containerBuilder == 'containerimage-ghcr' }}
    permissions:
      contents: read
      packages: write
      id-token: write
      security-events: write
      actions: read
      attestations: write
    secrets: inherit
    uses: ./.github/workflows/build-container-ghcr.yml
    with:
      containerfile: ${{ inputs['container.containerfile'] }}
      context: ${{ inputs.workingDirectory }}
      branch: ${{ inputs.branch }}
      platforms: ${{ inputs['container.platforms'] }}
      enableSLSA: ${{ inputs['container.enableslsa'] }}
      enableSBOM: ${{ inputs['container.enablesbom'] }}
      enableScan: ${{ inputs['container.enablescan'] }}
      registry: ${{ inputs['container.registry'] }}
      imageTagStrategy: ${{ (inputs.releaseType == 'stable' || (!inputs.releaseType && !contains(github.ref_name, '-'))) && 'semver' || 'branch' }}
      pushImage: true

  # Step 4: Create GitHub Release  
  create-release:
    name: Create GitHub Release
    needs: [validate-prerequisites, publish-maven-app, publish-npm-app, publish-maven-lib, publish-container]
    # Run even if previous jobs were skipped but at least one succeeded
    if: ${{ !failure() && !cancelled() && (inputs.releasePublisher == 'jreleaser' || inputs.releasePublisher == 'github-cli') }}
    permissions:
      contents: write
      packages: read
      id-token: write
    secrets: inherit
    uses: ./.github/workflows/github-release.yml
    with:
      releaseName: "${{ github.ref_name }}"
      checkoutRef: ${{ inputs.branch }}
      attachArtifacts: ${{ inputs['release.attachartifacts'] }}
      generateSBOM: ${{ inputs['release.generatesbom'] }}
      signArtifacts: ${{ inputs['release.signartifacts'] }}
      draft: ${{ inputs['release.draft'] }}
      useJReleaser: ${{ inputs.releasePublisher == 'jreleaser' }}
      jreleaserConfig: ${{ inputs['release.config'] }}
      makeLatest: ${{ (inputs.releaseType == 'stable' || (!inputs.releaseType && !contains(github.ref_name, '-'))) && 'true' || 'false' }}

