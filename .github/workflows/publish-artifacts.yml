# SPDX-FileCopyrightText: 2024 Digg - Agency for Digital Government
#
# SPDX-License-Identifier: CC0-1.0

# Description:
# This workflow handles unified artifact publishing for Maven and NPM projects.
# It supports various registry options including GitHub Packages, npm registry, and Maven Central.
#
# Usage:
# 1. Add the following to your workflow file:
#    jobs:
#      publish:
#        uses: diggsweden/.github/.github/workflows/publish-artifacts.yml@main
#        with:
#          projectType: "npm" # Required: maven, npm
#          registry: "github" # Required: github, npmjs, maven-central
#
# 2. Ensure your repository has the required secrets for authentication
#
# 3. The workflow will build and publish artifacts to the specified registry
---
name: Publish Artifacts

on:
  workflow_call: # yamllint disable-line rule:truthy
    inputs:
      projectType:
        description: "Project type: maven, npm"
        required: true
        type: string
      registry:
        description: "Target registry: github, npmjs, maven-central"
        required: true
        type: string


      prePublishScript:
        description: "Script to run before publishing"
        required: false
        type: string
      npmTag:
        description: "NPM publish tag (latest, beta, alpha, rc)"
        required: false
        default: "latest"
        type: string
      javaVersion:
        description: "Java version for Maven projects"
        required: false
        default: "21"
        type: string
      nodeVersion:
        description: "Node version for NPM projects"
        required: false
        default: "22.x"
        type: string
      workingDirectory:
        description: "Working directory for the build"
        required: false
        default: "."
        type: string
      egress-policy:
        description: "Egress policy for the Harden Runner step"
        required: false
        default: "audit"
        type: string

permissions:
  contents: read

jobs:
  publish-artifacts:
    name: Publish ${{ inputs.projectType }} to ${{ inputs.registry }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write 
    
    env:
      MAVEN_CLI_OPTS: "--batch-mode --no-transfer-progress --errors --fail-at-end -Dstyle.color=always"
    
    steps:
      - name: Harden GitHub runner
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: ${{ inputs.egress-policy }}

      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      # Maven Setup
      - name: Set up JDK ${{ inputs.javaVersion }}
        if: ${{ inputs.projectType == 'maven' }}
        uses: actions/setup-java@dded0888837ed1f317902acf8a20df0ad188d165 # v5.0.0
        with:
          java-version: ${{ inputs.javaVersion }}
          distribution: 'temurin'
          cache: maven
          server-id: ${{ inputs.registry == 'github' && 'github' || 'central' }}
          server-username: ${{ inputs.registry == 'maven-central' && 'MAVEN_USERNAME' || 'GITHUB_ACTOR' }}
          server-password: ${{ inputs.registry == 'maven-central' && 'MAVEN_CENTRAL_TOKEN' || 'GITHUB_TOKEN' }}

      # NPM Setup
      - name: Set up Node.js ${{ inputs.nodeVersion }}
        if: ${{ inputs.projectType == 'npm' }}
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version: ${{ inputs.nodeVersion }}
          registry-url: ${{ inputs.registry == 'github' && 'https://npm.pkg.github.com' || 'https://registry.npmjs.org' }}
          cache: 'npm'

      # Pre-publish script
      - name: Run pre-publish script
        if: ${{ inputs.prePublishScript }}
        working-directory: ${{ inputs.workingDirectory }}
        run: |
          ${{ inputs.prePublishScript }}

      # Maven Build and Publish
      - name: Build and Publish Maven
        if: ${{ inputs.projectType == 'maven' }}
        working-directory: ${{ inputs.workingDirectory }}
        env:
          GITHUB_ACTOR: ${{ github.actor }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PACKAGE_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
          MAVEN_CENTRAL_TOKEN: ${{ secrets.MAVEN_CENTRAL_TOKEN }}
        run: |
          # Default Maven build
          # shellcheck disable=SC2086
          mvn $MAVEN_CLI_OPTS clean package -DskipTests
          
          # Publish to registry
          if [ "${{ inputs.registry }}" = "github" ]; then
            # shellcheck disable=SC2086
            mvn $MAVEN_CLI_OPTS deploy -DskipTests
          elif [ "${{ inputs.registry }}" = "maven-central" ]; then
            # shellcheck disable=SC2086
            mvn $MAVEN_CLI_OPTS deploy -DskipTests -P release
          fi

      - name: Upload Maven artifacts for container build
        if: ${{ inputs.projectType == 'maven' }}
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: maven-artifacts
          path: |
            target/*.jar
            !target/*-sources.jar
            !target/*-javadoc.jar
          retention-days: 1

      # NPM Build and Publish
      - name: Build and Publish NPM
        if: ${{ inputs.projectType == 'npm' }}
        working-directory: ${{ inputs.workingDirectory }}
        env:
          NODE_AUTH_TOKEN: ${{ inputs.registry == 'npmjs' && secrets.NPM_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          # Install dependencies
          npm ci
          
          # Default NPM build if script exists
          if npm run | grep -q "build"; then
            npm run build
          fi
          
          # Determine publish tag
          TAG="${{ inputs.npmTag }}"
          VERSION=$(node -p "require('./package.json').version")
          
          # Auto-detect pre-release tag if not specified
          if [ "$TAG" = "latest" ]; then
            if [[ "$VERSION" =~ -alpha\. ]]; then TAG="alpha"; fi
            if [[ "$VERSION" =~ -beta\. ]]; then TAG="beta"; fi
            if [[ "$VERSION" =~ -rc\. ]]; then TAG="rc"; fi
          fi
          
          # Publish to registry
          if [ "$TAG" = "latest" ]; then
            npm publish
          else
            npm publish --tag "$TAG"
          fi

      - name: Upload NPM artifacts for container build
        if: ${{ inputs.projectType == 'npm' }}
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: npm-artifacts
          path: |
            dist/
            build/
          retention-days: 1

      # Generate SBOM for published artifacts
      - name: Generate SBOM
        if: always()
        uses: anchore/sbom-action@f8bdd1d8ac5e901a77a92f111440fdb1b593736b # v0.20.6
        with:
          path: ${{ inputs.workingDirectory }}
          format: 'spdx-json'
          output-file: 'sbom.spdx.json'

      - name: Upload SBOM
        if: always()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: sbom-${{ inputs.projectType }}
          path: sbom.spdx.json
          retention-days: 30