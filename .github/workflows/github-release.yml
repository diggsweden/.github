# SPDX-FileCopyrightText: 2024 Digg - Agency for Digital Government
#
# SPDX-License-Identifier: CC0-1.0

# Description:
# This workflow handles unified GitHub release creation with support for both
# GitHub CLI and JReleaser backends. It includes SBOM generation, artifact signing,
# and checksum generation.
#
# Usage:
# 1. Add the following to your workflow file:
#    jobs:
#      release:
#        uses: diggsweden/.github/.github/workflows/github-release.yml@main
#        with:
#          generateSBOM: true
#          signArtifacts: true
#
# 2. Ensure your repository has the required secrets for GPG signing
#
# 3. The workflow will create a GitHub release with signed artifacts and SBOMs
---
name: Create GitHub Release

on:
  workflow_call: # yamllint disable-line rule:truthy
    inputs:
      releaseName:
        description: "Release name (supports template variables)"
        required: false
        default: "Release ${{ github.ref_name }}"
        type: string
      checkoutRef:
        description: "Git ref to checkout (branch or tag)"
        required: false
        default: "main"
        type: string
      attachArtifacts:
        description: "Glob patterns for artifacts to attach (newline or comma separated)"
        required: false
        type: string
      generateSBOM:
        description: "Generate and attach SBOM for the repository"
        required: false
        default: true
        type: boolean

      signArtifacts:
        description: "GPG sign all artifacts"
        required: false
        default: true
        type: boolean
      draft:
        description: "Create as draft release"
        required: false
        default: false
        type: boolean
      useJReleaser:
        description: "Use JReleaser for release creation"
        required: false
        default: false
        type: boolean
      jreleaserConfig:
        description: "Path to JReleaser config file"
        required: false
        default: "jreleaser.yml"
        type: string
      makeLatest:
        description: "Mark as latest release (true, false, legacy)"
        required: false
        default: "true"
        type: string
      egress-policy:
        description: "Egress policy for the Harden Runner step"
        required: false
        default: "audit"
        type: string

permissions:
  contents: read

jobs:
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: read
      id-token: write

    steps:
      - name: Harden GitHub runner
        uses: step-security/harden-runner@f4a75cfd619ee5ce8d5b864b0d183aff3c69b55a # v2.13.1
        with:
          egress-policy: ${{ inputs.egress-policy }}

      - name: Checkout repository with moved tag
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          ref: ${{ inputs.checkoutRef }}
          fetch-depth: 0
          fetch-tags: true

      - name: Import GPG key
        if: ${{ inputs.signArtifacts }}
        id: import-gpg
        uses: crazy-max/ghaction-import-gpg@e89d40939c28e39f97cf32126055eeae86ba74ec # v6.3.0
        with:
          gpg_private_key: ${{ secrets.OSPO_BOT_GPG_PRIV }}
          passphrase: ${{ secrets.OSPO_BOT_GPG_PASS }}
          git_user_signingkey: true
          
      - name: Generate Releasenotes
        uses: orhun/git-cliff-action@d77b37db2e3f7398432d34b72a12aa3e2ba87e51 # v4.6.0
        with:
          args: --latest
        env:
          OUTPUT: ReleasenotesTmp
          GITHUB_REPO: ${{ github.repository }}

      # JReleaser Path
      - name: Setup Java for JReleaser
        if: ${{ inputs.useJReleaser }}
        uses: actions/setup-java@dded0888837ed1f317902acf8a20df0ad188d165 # v5.0.0
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Download Maven artifacts for JReleaser
        if: ${{ inputs.useJReleaser }}
        uses: actions/download-artifact@65a9edc5881444af0b9093a5e628f2fe47ea3b2e # v4.1.7
        continue-on-error: true
        with:
          name: maven-artifacts
          path: target/

      - name: Run JReleaser
        if: ${{ inputs.useJReleaser }}
        env:
          JRELEASER_GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN || secrets.GITHUB_TOKEN }}
          JRELEASER_GPG_PUBLIC_KEY: ${{ secrets.OSPO_BOT_GPG_PUB }}
          JRELEASER_GPG_SECRET_KEY: ${{ secrets.OSPO_BOT_GPG_PRIV }}
          JRELEASER_GPG_PASSPHRASE: ${{ secrets.OSPO_BOT_GPG_PASS }}
        run: |
          # Check if jreleaser config exists
          if [ ! -f "${{ inputs.jreleaserConfig }}" ]; then
            echo "JReleaser config not found at ${{ inputs.jreleaserConfig }}"
            exit 1
          fi
          
          # Run JReleaser (Maven projects only)
          if [ -f "pom.xml" ]; then
            mvn -B jreleaser:full-release
          else
            echo "JReleaser is only supported for Maven projects with pom.xml"
            echo "For other project types, use useJReleaser: false"
            exit 1
          fi

      # GitHub CLI Path (when not using JReleaser)

      - name: Generate SBOMs
        if: ${{ !inputs.useJReleaser && inputs.generateSBOM }}
        run: |
          # Install syft if not available
          if ! command -v syft &> /dev/null; then
            curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /tmp
            export PATH="/tmp:$PATH"
          fi
          
          # Generate SBOMs in the two most commonly used formats
          syft . -o spdx-json > sbom.spdx.json
          syft . -o cyclonedx-json > sbom.cyclonedx.json

      - name: Generate checksums and signatures
        if: ${{ !inputs.useJReleaser && inputs.attachArtifacts != '' }}
        run: |
          # Generate checksums for specified artifacts
          if [ -n "${{ inputs.attachArtifacts }}" ]; then
            # Parse the artifact patterns
            IFS=',' read -ra PATTERNS <<< "${{ inputs.attachArtifacts }}"
            
            # Generate checksums for each matching file
            for pattern in "${PATTERNS[@]}"; do
              pattern=$(echo "$pattern" | xargs)
              for file in $pattern; do
                if [ -f "$file" ]; then
                  sha256sum "$file" >> checksums.sha256
                  
                  # Sign if enabled
                  if [ "${{ inputs.signArtifacts }}" = "true" ]; then
                    gpg --armor --detach-sign "$file"
                  fi
                fi
              done
            done
          fi
          
          # Also checksum and sign SBOMs if they exist
          if [ -f "sbom.spdx.json" ]; then
            sha256sum sbom.*.json >> checksums.sha256
            if [ "${{ inputs.signArtifacts }}" = "true" ]; then
              gpg --armor --detach-sign sbom.spdx.json
              gpg --armor --detach-sign sbom.cyclonedx.json
            fi
          fi

      - name: Prepare release notes for GitHub CLI
        if: ${{ !inputs.useJReleaser }}
        run: |
          # Use git-cliff generated release notes
          if [ -f "ReleasenotesTmp" ]; then
            cp ReleasenotesTmp release-notes.md
            echo "Using git-cliff generated release notes"
          else
            echo "No release notes generated by git-cliff"
            touch release-notes.md
          fi

      - name: Create GitHub Release
        if: ${{ !inputs.useJReleaser }}
        env:
          GH_TOKEN: ${{ secrets.RELEASE_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          # Build command arguments
          ARGS=()
          ARGS+=("${{ github.ref_name }}")
          ARGS+=("--title" "${{ github.ref_name }}")
          
          # Add flags
          if [ "${{ inputs.draft }}" = "true" ]; then
            ARGS+=("--draft")
          fi
          
          # Auto-detect prerelease from version tag
          if [[ "${{ github.ref_name }}" =~ -(alpha|beta|rc|dev|snapshot) ]]; then
            ARGS+=("--prerelease")
          fi
          
          if [ "${{ inputs.makeLatest }}" != "true" ]; then
            ARGS+=("--latest=false")
          fi
          
          # Add release notes from git-cliff
          if [ -f "release-notes.md" ] && [ -s "release-notes.md" ]; then
            ARGS+=("--notes-file" "release-notes.md")
          fi
          
          # Add specified artifacts
          if [ -n "${{ inputs.attachArtifacts }}" ]; then
            # Split comma-separated patterns and add each file
            IFS=',' read -ra PATTERNS <<< "${{ inputs.attachArtifacts }}"
            for pattern in "${PATTERNS[@]}"; do
              pattern=$(echo "$pattern" | xargs)
              for file in $pattern; do
                [ -f "$file" ] && ARGS+=("$file")
              done
            done
          fi
          
          # Add SBOMs if they exist
          if [ -f "sbom.spdx.json" ]; then
            ARGS+=("sbom.spdx.json" "sbom.cyclonedx.json")
          fi
          
          # Add checksums if they exist
          if [ -f "checksums.sha256" ]; then
            ARGS+=("checksums.sha256")
          fi
          
          # Add signature files if they exist
          for sig in *.asc; do
            [ -f "$sig" ] && ARGS+=("$sig")
          done
          
          # Create the release
          echo "Creating release with gh release create"
          gh release create "${ARGS[@]}"

      - name: Upload release artifacts summary
        if: always()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: release-artifacts-${{ github.run_id }}
          path: |
            release-files/
            ReleasenotesTmp
            release-notes.md
          retention-days: 30
          if-no-files-found: ignore