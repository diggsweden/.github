# SPDX-FileCopyrightText: 2024 Digg - Agency for Digital Government
#
# SPDX-License-Identifier: CC0-1.0

# Release Prerequisites Validator
# 
# Purpose: Validates that all requirements for a successful release are met before
# attempting the actual release process. Prevents failed releases by checking
# credentials, permissions, and configuration early in the process.
#
# How it works:
# 1. Verifies tag format matches expected pattern
# 2. Checks tag version matches project version (pom.xml/package.json)
# 3. Validates all required secrets are present and valid
# 4. Tests authentication to target registries (Maven Central, NPM, ghcr.io)
# 5. Verifies GPG keys are valid and not expired
# 6. Checks user authorization for non-SNAPSHOT releases (if configured)
# 7. Generates detailed validation report
#
# Security controls:
# - Never logs secret values, only validation status
# - Checks GPG key expiration dates
# - Validates user is in authorized developers list (if enabled)
# - Verifies registry credentials before attempting publish
#
# Required Secrets (depending on configuration):
#   GPG_SECRET_KEY: For signature validation
#   GPG_PASSPHRASE: For signature validation
#   MAVEN_CENTRAL_USERNAME: For Maven Central auth check
#   MAVEN_CENTRAL_PASSWORD: For Maven Central auth check
#   NPM_TOKEN: For NPM registry auth check
#   AUTHORIZED_DEVELOPERS: Comma-separated list of authorized users
#
# Required Permissions:
#   contents: read   # Read version files
#   packages: read   # Verify package registry access
#
# Usage:
# Called automatically as the first step in release-orchestrator.yml
# Can also be run manually via workflow_dispatch for testing
---
name: Validate Release Prerequisites

on:
  workflow_call: # yamllint disable-line rule:truthy
    inputs:
      projectType:
        description: "Project type: maven, npm"
        required: true
        type: string
      useJReleaser:
        description: "Whether JReleaser will be used"
        required: false
        default: false
        type: boolean
      artifactPublisher:
        description: "Artifact publisher being used"
        required: false
        type: string
      containerRegistry:
        description: "Container registry"
        required: false
        default: "ghcr.io"
        type: string
      signArtifacts:
        description: "Whether artifacts will be GPG signed"
        required: false
        default: true
        type: boolean
      checkAuthorization:
        description: "Check if user is authorized for non-SNAPSHOT releases"
        required: false
        default: false
        type: boolean

  workflow_dispatch: # Allow manual validation
    inputs:
      projectType:
        description: "Project type"
        required: true
        type: choice
        options:
          - maven
          - npm
      useJReleaser:
        description: "Using JReleaser?"
        required: false
        type: boolean
        default: false

permissions:
  contents: read  # Best Security practice. Jobs only get read as base, and then permissions are added as needed

jobs:
  validate:
    name: Validate Prerequisites
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 1
      
      - name: Check Release Authorization
        if: ${{ inputs.checkAuthorization }}
        run: |
          # Check if this is a SNAPSHOT release
          TAG_NAME="${{ github.ref_name }}"
          if [[ "${TAG_NAME}" == *-SNAPSHOT ]]; then
            echo "✅ SNAPSHOT release - authorization check skipped"
            exit 0
          fi
          
          # For non-SNAPSHOT releases, check if actor is authorized
          AUTHORIZED_DEVS="${{ secrets.AUTHORIZED_RELEASE_DEVELOPERS }}"
          ACTOR="${{ github.actor }}"
          
          if [ -z "$AUTHORIZED_DEVS" ]; then
            echo "::warning::AUTHORIZED_RELEASE_DEVELOPERS secret not configured"
            echo "All users with tag push access can create releases"
            echo "✅ Authorization check passed (no restrictions configured)"
            exit 0
          fi
          
          # Check if current actor is in the authorized list
          if echo ",$AUTHORIZED_DEVS," | grep -q ",$ACTOR,"; then
            echo "✅ User '$ACTOR' is authorized to create production releases"
          else
            echo "::error::User '$ACTOR' is not authorized to create non-SNAPSHOT releases"
            echo "Only the following users can create production releases:"
            echo "$AUTHORIZED_DEVS" | tr ',' '\n' | sed 's/^/  - /'
            echo ""
            echo "If you need to create a release, please:"
            echo "1. Contact one of the authorized developers"
            echo "2. Or create a SNAPSHOT release instead (tag with -SNAPSHOT suffix)"
            exit 1
          fi
      
      - name: Validate GPG Configuration
        if: ${{ inputs.signArtifacts }}
        id: gpg-test
        uses: crazy-max/ghaction-import-gpg@e89d40939c28e39f97cf32126055eeae86ba74ec # v6.3.0
        with:
          gpg_private_key: ${{ secrets.OSPO_BOT_GPG_PRIV }}
          passphrase: ${{ secrets.OSPO_BOT_GPG_PASS }}
          git_user_signingkey: true
      
      - name: Validate GPG Public Key
        if: ${{ inputs.signArtifacts }}
        run: |
          if [ -z "${{ secrets.OSPO_BOT_GPG_PUB }}" ]; then
            echo "::error::Missing OSPO_BOT_GPG_PUB secret"
            echo "This secret is needed for GPG operations and signing"
            echo "Add it in Settings → Secrets → Actions"
            exit 1
          fi
          echo "✅ GPG public key configured"
      
      - name: Validate GitHub Push Token
        run: |
          # OSPO_BOT_GHTOKEN is required for pushing version bumps
          if [ -z "${{ secrets.OSPO_BOT_GHTOKEN }}" ]; then
            echo "::error::Missing OSPO_BOT_GHTOKEN secret"
            echo "This token is required for:"
            echo "  - Pushing version bump commits"
            echo "  - Moving tags after version bump"
            echo "  - Pushing changelog updates"
            echo ""
            echo "Create a PAT with 'repo' scope and add as OSPO_BOT_GHTOKEN secret"
            exit 1
          fi
          
          # Test token validity and permissions
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Authorization: token ${{ secrets.OSPO_BOT_GHTOKEN }}" \
            https://api.github.com/repos/${{ github.repository }})
          
          if [ "$RESPONSE" != "200" ]; then
            echo "::error::OSPO_BOT_GHTOKEN is invalid or lacks permissions"
            echo "HTTP Response: $RESPONSE"
            echo "Ensure the token has 'repo' scope"
            exit 1
          fi
          
          echo "✅ GitHub push token validated"
      
      - name: Validate Release Token
        run: |
          # RELEASE_TOKEN is optional but recommended
          TOKEN="${{ secrets.RELEASE_TOKEN }}"
          if [ -z "$TOKEN" ]; then
            echo "::warning::RELEASE_TOKEN not configured"
            echo "Will fall back to GITHUB_TOKEN for release creation"
            echo "Note: GITHUB_TOKEN may have limitations for release creation"
            
            # Test if GITHUB_TOKEN can at least read releases
            RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              https://api.github.com/repos/${{ github.repository }}/releases)
            
            if [ "$RESPONSE" != "200" ]; then
              echo "::warning::GITHUB_TOKEN may not have sufficient permissions for releases"
            fi
          else
            # Test RELEASE_TOKEN
            RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" \
              -H "Authorization: token $TOKEN" \
              https://api.github.com/repos/${{ github.repository }}/releases)
            
            if [ "$RESPONSE" != "200" ]; then
              echo "::error::RELEASE_TOKEN is invalid or lacks permissions"
              exit 1
            fi
            echo "✅ Release token validated"
          fi
      
      - name: Validate Maven Central Credentials
        if: ${{ inputs.artifactPublisher == 'maven-lib-mavencentral' }}
        run: |
          if [ -z "${{ secrets.MAVENCENTRAL_USERNAME }}" ]; then
            echo "::error::Missing MAVENCENTRAL_USERNAME secret"
            echo "Required for publishing to Maven Central"
            exit 1
          fi
          
          if [ -z "${{ secrets.MAVENCENTRAL_PASSWORD }}" ]; then
            echo "::error::Missing MAVENCENTRAL_PASSWORD secret"
            echo "Required for publishing to Maven Central"
            exit 1
          fi
          
          echo "✅ Maven Central credentials configured"
      
      - name: Validate NPM Token
        if: ${{ inputs.artifactPublisher == 'npm-app-npmjs' }}
        run: |
          if [ -z "${{ secrets.NPM_TOKEN }}" ]; then
            echo "::error::Missing NPM_TOKEN secret"
            echo "Required for publishing to npmjs.org"
            echo "Generate token at https://www.npmjs.com/settings/~/tokens"
            exit 1
          fi
          
          echo "✅ NPM token configured"
      
      - name: Generate Validation Report
        if: always()
        run: |
          echo "## 📋 Release Prerequisites Validation Report"
          echo ""
          echo "### Configuration"
          echo "- **Project Type:** ${{ inputs.projectType }}"
          echo "- **Artifact Publisher:** ${{ inputs.artifactPublisher }}"
          echo "- **Container Registry:** ${{ inputs.containerRegistry }}"
          echo "- **JReleaser:** ${{ inputs.useJReleaser && 'Enabled' || 'Disabled' }}"
          echo "- **GPG Signing:** ${{ inputs.signArtifacts && 'Enabled' || 'Disabled' }}"
          echo ""
          
          echo "### Required Secrets Status"
          echo ""
          echo "| Secret | Required For | Status |"
          echo "|--------|--------------|--------|"
          
          # GPG signing (if enabled)
          if [ "${{ inputs.signArtifacts }}" = "true" ]; then
            if [ "${{ steps.gpg-test.outcome }}" = "success" ]; then
              echo "| OSPO_BOT_GPG_PRIV | Signing commits & artifacts | ✅ |"
              echo "| OSPO_BOT_GPG_PASS | Signing commits & artifacts | ✅ |"
            else
              echo "| OSPO_BOT_GPG_PRIV | Signing commits & artifacts | ❌ |"
              echo "| OSPO_BOT_GPG_PASS | Signing commits & artifacts | ❌ |"
            fi
          else
            echo "| GPG Signing | Disabled | ⏭️ Skipped |"
          fi
          
          if [ -n "${{ secrets.OSPO_BOT_GHTOKEN }}" ]; then
            echo "| OSPO_BOT_GHTOKEN | Pushing commits | ✅ |"
          else
            echo "| OSPO_BOT_GHTOKEN | Pushing commits | ❌ |"
          fi
          
          # GPG Public Key (if signing enabled)
          if [ "${{ inputs.signArtifacts }}" = "true" ]; then
            if [ -n "${{ secrets.OSPO_BOT_GPG_PUB }}" ]; then
              echo "| OSPO_BOT_GPG_PUB | GPP operations | ✅ |"
            else
              echo "| OSPO_BOT_GPG_PUB | GPG operations | ❌ |"
            fi
          fi
          
          if [ -n "${{ secrets.RELEASE_TOKEN }}" ]; then
            echo "| RELEASE_TOKEN | Creating releases | ✅ |"
          else
            echo "| RELEASE_TOKEN | Creating releases | ⚠️ Optional |"
          fi
          
          echo ""
          if [ "${{ job.status }}" = "success" ]; then
            echo "### ✅ All required prerequisites are configured!"
            echo "Ready to proceed with release 🚀"
          else
            echo "### ❌ Prerequisites validation failed"
            echo "Please configure the missing secrets before attempting release"
          fi